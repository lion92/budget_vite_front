# docker-compose.full.yml - Architecture complète Front + Back + DB
version: '3.8'

services:
  # =====================================================================
  # BASE DE DONNÉES POSTGRESQL
  # =====================================================================
  database:
    image: postgres:15-alpine
    container_name: budget-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: budget_app
      POSTGRES_USER: budget_app_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - budget-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U budget_app_user -d budget_app"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =====================================================================
  # REDIS POUR LE CACHE (OPTIONNEL)
  # =====================================================================
  redis:
    image: redis:7-alpine
    container_name: budget-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================================
  # BACKEND API NODE.JS
  # =====================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: budget-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=budget_app
      - DB_USER=budget_app_user
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_change_me}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_change_me}
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_jwt_key_change_me}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your_super_secret_refresh_key_change_me}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760
      - BCRYPT_ROUNDS=12
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3010:3010"
    networks:
      - budget-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =====================================================================
  # FRONTEND REACT (DÉVELOPPEMENT)
  # =====================================================================
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: budget-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3010
      - VITE_APP_NAME=Budget Manager
      - VITE_APP_VERSION=1.0.0
    volumes:
      - .:/app
      - /app/node_modules
      - frontend_cache:/app/.vite
    ports:
      - "3000:3000"
    networks:
      - budget-network
    depends_on:
      - backend
    stdin_open: true
    tty: true
    profiles:
      - development

  # =====================================================================
  # FRONTEND REACT (PRODUCTION AVEC NGINX)
  # =====================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: budget-frontend
    restart: unless-stopped
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - budget-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # =====================================================================
  # NGINX REVERSE PROXY (OPTIONNEL POUR PRODUCTION)
  # =====================================================================
  reverse-proxy:
    image: nginx:alpine
    container_name: budget-reverse-proxy
    restart: unless-stopped
    volumes:
      - ./nginx/reverse-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_proxy_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - budget-network
    depends_on:
      - frontend
      - backend
    profiles:
      - reverse-proxy

  # =====================================================================
  # OUTILS DE MONITORING (OPTIONNEL)
  # =====================================================================

  # Adminer pour gérer la base de données
  adminer:
    image: adminer:latest
    container_name: budget-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: database
    ports:
      - "8080:8080"
    networks:
      - budget-network
    depends_on:
      - database
    profiles:
      - tools

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: budget-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - budget-network
    profiles:
      - monitoring

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: budget-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - budget-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =====================================================================
# VOLUMES PERSISTANTS
# =====================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_cache:
    driver: local
  nginx_logs:
    driver: local
  nginx_proxy_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =====================================================================
# RÉSEAUX
# =====================================================================
networks:
  budget-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16